/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.UserCompetence;
import com.liferay.lms.model.UserCompetenceModel;
import com.liferay.lms.model.UserCompetenceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserCompetence service. Represents a row in the &quot;Lms_UserCompetence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.UserCompetenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserCompetenceImpl}.
 * </p>
 *
 * @author TLS
 * @see UserCompetenceImpl
 * @see com.liferay.lms.model.UserCompetence
 * @see com.liferay.lms.model.UserCompetenceModel
 * @generated
 */
public class UserCompetenceModelImpl extends BaseModelImpl<UserCompetence>
	implements UserCompetenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user competence model instance should use the {@link com.liferay.lms.model.UserCompetence} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_UserCompetence";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "usercompId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "competenceId", Types.BIGINT },
			{ "compDate", Types.TIMESTAMP },
			{ "courseId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_UserCompetence (uuid_ VARCHAR(75) null,usercompId LONG not null primary key,userId LONG,competenceId LONG,compDate DATE null,courseId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Lms_UserCompetence";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.UserCompetence"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.UserCompetence"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.UserCompetence"),
			true);
	public static long COMPETENCEID_COLUMN_BITMASK = 1L;
	public static long COURSEID_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserCompetence toModel(UserCompetenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserCompetence model = new UserCompetenceImpl();

		model.setUuid(soapModel.getUuid());
		model.setUsercompId(soapModel.getUsercompId());
		model.setUserId(soapModel.getUserId());
		model.setCompetenceId(soapModel.getCompetenceId());
		model.setCompDate(soapModel.getCompDate());
		model.setCourseId(soapModel.getCourseId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserCompetence> toModels(UserCompetenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserCompetence> models = new ArrayList<UserCompetence>(soapModels.length);

		for (UserCompetenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.UserCompetence"));

	public UserCompetenceModelImpl() {
	}

	public long getPrimaryKey() {
		return _usercompId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUsercompId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_usercompId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return UserCompetence.class;
	}

	public String getModelClassName() {
		return UserCompetence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("usercompId", getUsercompId());
		attributes.put("userId", getUserId());
		attributes.put("competenceId", getCompetenceId());
		attributes.put("compDate", getCompDate());
		attributes.put("courseId", getCourseId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long usercompId = (Long)attributes.get("usercompId");

		if (usercompId != null) {
			setUsercompId(usercompId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long competenceId = (Long)attributes.get("competenceId");

		if (competenceId != null) {
			setCompetenceId(competenceId);
		}

		Date compDate = (Date)attributes.get("compDate");

		if (compDate != null) {
			setCompDate(compDate);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getUsercompId() {
		return _usercompId;
	}

	public void setUsercompId(long usercompId) {
		_usercompId = usercompId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getCompetenceId() {
		return _competenceId;
	}

	public void setCompetenceId(long competenceId) {
		_columnBitmask |= COMPETENCEID_COLUMN_BITMASK;

		if (!_setOriginalCompetenceId) {
			_setOriginalCompetenceId = true;

			_originalCompetenceId = _competenceId;
		}

		_competenceId = competenceId;
	}

	public long getOriginalCompetenceId() {
		return _originalCompetenceId;
	}

	public Date getCompDate() {
		return _compDate;
	}

	public void setCompDate(Date compDate) {
		_compDate = compDate;
	}

	public long getCourseId() {
		return _courseId;
	}

	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserCompetence.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserCompetence toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (UserCompetence)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		UserCompetenceImpl userCompetenceImpl = new UserCompetenceImpl();

		userCompetenceImpl.setUuid(getUuid());
		userCompetenceImpl.setUsercompId(getUsercompId());
		userCompetenceImpl.setUserId(getUserId());
		userCompetenceImpl.setCompetenceId(getCompetenceId());
		userCompetenceImpl.setCompDate(getCompDate());
		userCompetenceImpl.setCourseId(getCourseId());

		userCompetenceImpl.resetOriginalValues();

		return userCompetenceImpl;
	}

	public int compareTo(UserCompetence userCompetence) {
		long primaryKey = userCompetence.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		UserCompetence userCompetence = null;

		try {
			userCompetence = (UserCompetence)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = userCompetence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserCompetenceModelImpl userCompetenceModelImpl = this;

		userCompetenceModelImpl._originalUuid = userCompetenceModelImpl._uuid;

		userCompetenceModelImpl._originalUserId = userCompetenceModelImpl._userId;

		userCompetenceModelImpl._setOriginalUserId = false;

		userCompetenceModelImpl._originalCompetenceId = userCompetenceModelImpl._competenceId;

		userCompetenceModelImpl._setOriginalCompetenceId = false;

		userCompetenceModelImpl._originalCourseId = userCompetenceModelImpl._courseId;

		userCompetenceModelImpl._setOriginalCourseId = false;

		userCompetenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserCompetence> toCacheModel() {
		UserCompetenceCacheModel userCompetenceCacheModel = new UserCompetenceCacheModel();

		userCompetenceCacheModel.uuid = getUuid();

		String uuid = userCompetenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userCompetenceCacheModel.uuid = null;
		}

		userCompetenceCacheModel.usercompId = getUsercompId();

		userCompetenceCacheModel.userId = getUserId();

		userCompetenceCacheModel.competenceId = getCompetenceId();

		Date compDate = getCompDate();

		if (compDate != null) {
			userCompetenceCacheModel.compDate = compDate.getTime();
		}
		else {
			userCompetenceCacheModel.compDate = Long.MIN_VALUE;
		}

		userCompetenceCacheModel.courseId = getCourseId();

		return userCompetenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", usercompId=");
		sb.append(getUsercompId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", competenceId=");
		sb.append(getCompetenceId());
		sb.append(", compDate=");
		sb.append(getCompDate());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.UserCompetence");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usercompId</column-name><column-value><![CDATA[");
		sb.append(getUsercompId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>competenceId</column-name><column-value><![CDATA[");
		sb.append(getCompetenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compDate</column-name><column-value><![CDATA[");
		sb.append(getCompDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserCompetence.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			UserCompetence.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _usercompId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _competenceId;
	private long _originalCompetenceId;
	private boolean _setOriginalCompetenceId;
	private Date _compDate;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _columnBitmask;
	private UserCompetence _escapedModelProxy;
}