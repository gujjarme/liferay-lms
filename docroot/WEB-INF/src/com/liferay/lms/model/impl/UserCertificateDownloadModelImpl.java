/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.UserCertificateDownload;
import com.liferay.lms.model.UserCertificateDownloadModel;
import com.liferay.lms.service.persistence.UserCertificateDownloadPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserCertificateDownload service. Represents a row in the &quot;Lms_UserCertificateDownload&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.UserCertificateDownloadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserCertificateDownloadImpl}.
 * </p>
 *
 * @author TLS
 * @see UserCertificateDownloadImpl
 * @see com.liferay.lms.model.UserCertificateDownload
 * @see com.liferay.lms.model.UserCertificateDownloadModel
 * @generated
 */
public class UserCertificateDownloadModelImpl extends BaseModelImpl<UserCertificateDownload>
	implements UserCertificateDownloadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user certificate download model instance should use the {@link com.liferay.lms.model.UserCertificateDownload} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_UserCertificateDownload";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "competenceId", Types.BIGINT },
			{ "downloadDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_UserCertificateDownload (userId LONG not null,courseId LONG not null,competenceId LONG not null,downloadDate DATE null,primary key (userId, courseId, competenceId))";
	public static final String TABLE_SQL_DROP = "drop table Lms_UserCertificateDownload";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.UserCertificateDownload"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.UserCertificateDownload"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.UserCertificateDownload"));

	public UserCertificateDownloadModelImpl() {
	}

	public UserCertificateDownloadPK getPrimaryKey() {
		return new UserCertificateDownloadPK(_userId, _courseId, _competenceId);
	}

	public void setPrimaryKey(UserCertificateDownloadPK primaryKey) {
		setUserId(primaryKey.userId);
		setCourseId(primaryKey.courseId);
		setCompetenceId(primaryKey.competenceId);
	}

	public Serializable getPrimaryKeyObj() {
		return new UserCertificateDownloadPK(_userId, _courseId, _competenceId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserCertificateDownloadPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return UserCertificateDownload.class;
	}

	public String getModelClassName() {
		return UserCertificateDownload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("courseId", getCourseId());
		attributes.put("competenceId", getCompetenceId());
		attributes.put("downloadDate", getDownloadDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long competenceId = (Long)attributes.get("competenceId");

		if (competenceId != null) {
			setCompetenceId(competenceId);
		}

		Date downloadDate = (Date)attributes.get("downloadDate");

		if (downloadDate != null) {
			setDownloadDate(downloadDate);
		}
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getCourseId() {
		return _courseId;
	}

	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	public long getCompetenceId() {
		return _competenceId;
	}

	public void setCompetenceId(long competenceId) {
		_competenceId = competenceId;
	}

	public Date getDownloadDate() {
		return _downloadDate;
	}

	public void setDownloadDate(Date downloadDate) {
		_downloadDate = downloadDate;
	}

	@Override
	public UserCertificateDownload toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (UserCertificateDownload)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		UserCertificateDownloadImpl userCertificateDownloadImpl = new UserCertificateDownloadImpl();

		userCertificateDownloadImpl.setUserId(getUserId());
		userCertificateDownloadImpl.setCourseId(getCourseId());
		userCertificateDownloadImpl.setCompetenceId(getCompetenceId());
		userCertificateDownloadImpl.setDownloadDate(getDownloadDate());

		userCertificateDownloadImpl.resetOriginalValues();

		return userCertificateDownloadImpl;
	}

	public int compareTo(UserCertificateDownload userCertificateDownload) {
		UserCertificateDownloadPK primaryKey = userCertificateDownload.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		UserCertificateDownload userCertificateDownload = null;

		try {
			userCertificateDownload = (UserCertificateDownload)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		UserCertificateDownloadPK primaryKey = userCertificateDownload.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UserCertificateDownload> toCacheModel() {
		UserCertificateDownloadCacheModel userCertificateDownloadCacheModel = new UserCertificateDownloadCacheModel();

		userCertificateDownloadCacheModel.userId = getUserId();

		userCertificateDownloadCacheModel.courseId = getCourseId();

		userCertificateDownloadCacheModel.competenceId = getCompetenceId();

		Date downloadDate = getDownloadDate();

		if (downloadDate != null) {
			userCertificateDownloadCacheModel.downloadDate = downloadDate.getTime();
		}
		else {
			userCertificateDownloadCacheModel.downloadDate = Long.MIN_VALUE;
		}

		return userCertificateDownloadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", competenceId=");
		sb.append(getCompetenceId());
		sb.append(", downloadDate=");
		sb.append(getDownloadDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.UserCertificateDownload");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>competenceId</column-name><column-value><![CDATA[");
		sb.append(getCompetenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>downloadDate</column-name><column-value><![CDATA[");
		sb.append(getDownloadDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserCertificateDownload.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			UserCertificateDownload.class
		};
	private long _userId;
	private String _userUuid;
	private long _courseId;
	private long _competenceId;
	private Date _downloadDate;
	private UserCertificateDownload _escapedModelProxy;
}