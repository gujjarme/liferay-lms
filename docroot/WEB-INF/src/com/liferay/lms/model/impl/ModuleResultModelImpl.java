/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.ModuleResult;
import com.liferay.lms.model.ModuleResultModel;
import com.liferay.lms.model.ModuleResultSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ModuleResult service. Represents a row in the &quot;Lms_ModuleResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.ModuleResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModuleResultImpl}.
 * </p>
 *
 * @author TLS
 * @see ModuleResultImpl
 * @see com.liferay.lms.model.ModuleResult
 * @see com.liferay.lms.model.ModuleResultModel
 * @generated
 */
public class ModuleResultModelImpl extends BaseModelImpl<ModuleResult>
	implements ModuleResultModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a module result model instance should use the {@link com.liferay.lms.model.ModuleResult} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_ModuleResult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "moduleId", Types.BIGINT },
			{ "result", Types.BIGINT },
			{ "comments", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "passed", Types.BOOLEAN },
			{ "mrId", Types.BIGINT },
			{ "passedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_ModuleResult (moduleId LONG,result LONG,comments VARCHAR(75) null,userId LONG,startDate DATE null,passed BOOLEAN,mrId LONG not null primary key,passedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Lms_ModuleResult";
	public static final String ORDER_BY_JPQL = " ORDER BY moduleResult.mrId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Lms_ModuleResult.mrId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.ModuleResult"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.ModuleResult"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.ModuleResult"),
			true);
	public static long MODULEID_COLUMN_BITMASK = 1L;
	public static long PASSED_COLUMN_BITMASK = 2L;
	public static long PASSEDDATE_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ModuleResult toModel(ModuleResultSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ModuleResult model = new ModuleResultImpl();

		model.setModuleId(soapModel.getModuleId());
		model.setResult(soapModel.getResult());
		model.setComments(soapModel.getComments());
		model.setUserId(soapModel.getUserId());
		model.setStartDate(soapModel.getStartDate());
		model.setPassed(soapModel.getPassed());
		model.setMrId(soapModel.getMrId());
		model.setPassedDate(soapModel.getPassedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ModuleResult> toModels(ModuleResultSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ModuleResult> models = new ArrayList<ModuleResult>(soapModels.length);

		for (ModuleResultSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.ModuleResult"));

	public ModuleResultModelImpl() {
	}

	public long getPrimaryKey() {
		return _mrId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMrId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mrId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ModuleResult.class;
	}

	public String getModelClassName() {
		return ModuleResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("moduleId", getModuleId());
		attributes.put("result", getResult());
		attributes.put("comments", getComments());
		attributes.put("userId", getUserId());
		attributes.put("startDate", getStartDate());
		attributes.put("passed", getPassed());
		attributes.put("mrId", getMrId());
		attributes.put("passedDate", getPassedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long moduleId = (Long)attributes.get("moduleId");

		if (moduleId != null) {
			setModuleId(moduleId);
		}

		Long result = (Long)attributes.get("result");

		if (result != null) {
			setResult(result);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Boolean passed = (Boolean)attributes.get("passed");

		if (passed != null) {
			setPassed(passed);
		}

		Long mrId = (Long)attributes.get("mrId");

		if (mrId != null) {
			setMrId(mrId);
		}

		Date passedDate = (Date)attributes.get("passedDate");

		if (passedDate != null) {
			setPassedDate(passedDate);
		}
	}

	public long getModuleId() {
		return _moduleId;
	}

	public void setModuleId(long moduleId) {
		_columnBitmask |= MODULEID_COLUMN_BITMASK;

		if (!_setOriginalModuleId) {
			_setOriginalModuleId = true;

			_originalModuleId = _moduleId;
		}

		_moduleId = moduleId;
	}

	public long getOriginalModuleId() {
		return _originalModuleId;
	}

	public long getResult() {
		return _result;
	}

	public void setResult(long result) {
		_result = result;
	}

	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	public void setComments(String comments) {
		_comments = comments;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	public boolean getPassed() {
		return _passed;
	}

	public boolean isPassed() {
		return _passed;
	}

	public void setPassed(boolean passed) {
		_columnBitmask |= PASSED_COLUMN_BITMASK;

		if (!_setOriginalPassed) {
			_setOriginalPassed = true;

			_originalPassed = _passed;
		}

		_passed = passed;
	}

	public boolean getOriginalPassed() {
		return _originalPassed;
	}

	public long getMrId() {
		return _mrId;
	}

	public void setMrId(long mrId) {
		_columnBitmask = -1L;

		_mrId = mrId;
	}

	public Date getPassedDate() {
		return _passedDate;
	}

	public void setPassedDate(Date passedDate) {
		_columnBitmask |= PASSEDDATE_COLUMN_BITMASK;

		if (_originalPassedDate == null) {
			_originalPassedDate = _passedDate;
		}

		_passedDate = passedDate;
	}

	public Date getOriginalPassedDate() {
		return _originalPassedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ModuleResult.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ModuleResult toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ModuleResult)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ModuleResultImpl moduleResultImpl = new ModuleResultImpl();

		moduleResultImpl.setModuleId(getModuleId());
		moduleResultImpl.setResult(getResult());
		moduleResultImpl.setComments(getComments());
		moduleResultImpl.setUserId(getUserId());
		moduleResultImpl.setStartDate(getStartDate());
		moduleResultImpl.setPassed(getPassed());
		moduleResultImpl.setMrId(getMrId());
		moduleResultImpl.setPassedDate(getPassedDate());

		moduleResultImpl.resetOriginalValues();

		return moduleResultImpl;
	}

	public int compareTo(ModuleResult moduleResult) {
		int value = 0;

		if (getMrId() < moduleResult.getMrId()) {
			value = -1;
		}
		else if (getMrId() > moduleResult.getMrId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ModuleResult moduleResult = null;

		try {
			moduleResult = (ModuleResult)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = moduleResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ModuleResultModelImpl moduleResultModelImpl = this;

		moduleResultModelImpl._originalModuleId = moduleResultModelImpl._moduleId;

		moduleResultModelImpl._setOriginalModuleId = false;

		moduleResultModelImpl._originalUserId = moduleResultModelImpl._userId;

		moduleResultModelImpl._setOriginalUserId = false;

		moduleResultModelImpl._originalPassed = moduleResultModelImpl._passed;

		moduleResultModelImpl._setOriginalPassed = false;

		moduleResultModelImpl._originalPassedDate = moduleResultModelImpl._passedDate;

		moduleResultModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ModuleResult> toCacheModel() {
		ModuleResultCacheModel moduleResultCacheModel = new ModuleResultCacheModel();

		moduleResultCacheModel.moduleId = getModuleId();

		moduleResultCacheModel.result = getResult();

		moduleResultCacheModel.comments = getComments();

		String comments = moduleResultCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			moduleResultCacheModel.comments = null;
		}

		moduleResultCacheModel.userId = getUserId();

		Date startDate = getStartDate();

		if (startDate != null) {
			moduleResultCacheModel.startDate = startDate.getTime();
		}
		else {
			moduleResultCacheModel.startDate = Long.MIN_VALUE;
		}

		moduleResultCacheModel.passed = getPassed();

		moduleResultCacheModel.mrId = getMrId();

		Date passedDate = getPassedDate();

		if (passedDate != null) {
			moduleResultCacheModel.passedDate = passedDate.getTime();
		}
		else {
			moduleResultCacheModel.passedDate = Long.MIN_VALUE;
		}

		return moduleResultCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{moduleId=");
		sb.append(getModuleId());
		sb.append(", result=");
		sb.append(getResult());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", passed=");
		sb.append(getPassed());
		sb.append(", mrId=");
		sb.append(getMrId());
		sb.append(", passedDate=");
		sb.append(getPassedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.ModuleResult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>moduleId</column-name><column-value><![CDATA[");
		sb.append(getModuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passed</column-name><column-value><![CDATA[");
		sb.append(getPassed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mrId</column-name><column-value><![CDATA[");
		sb.append(getMrId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passedDate</column-name><column-value><![CDATA[");
		sb.append(getPassedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ModuleResult.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ModuleResult.class
		};
	private long _moduleId;
	private long _originalModuleId;
	private boolean _setOriginalModuleId;
	private long _result;
	private String _comments;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _startDate;
	private boolean _passed;
	private boolean _originalPassed;
	private boolean _setOriginalPassed;
	private long _mrId;
	private Date _passedDate;
	private Date _originalPassedDate;
	private long _columnBitmask;
	private ModuleResult _escapedModelProxy;
}