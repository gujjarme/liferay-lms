/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.LearningActivity;
import com.liferay.lms.model.LearningActivityModel;
import com.liferay.lms.model.LearningActivitySoap;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * The base model implementation for the LearningActivity service. Represents a row in the &quot;Lms_LearningActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.LearningActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningActivityImpl}.
 * </p>
 *
 * @author TLS
 * @see LearningActivityImpl
 * @see com.liferay.lms.model.LearningActivity
 * @see com.liferay.lms.model.LearningActivityModel
 * @generated
 */
public class LearningActivityModelImpl extends BaseModelImpl<LearningActivity>
	implements LearningActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning activity model instance should use the {@link com.liferay.lms.model.LearningActivity} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_LearningActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "actId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "typeId", Types.INTEGER },
			{ "startdate", Types.TIMESTAMP },
			{ "enddate", Types.TIMESTAMP },
			{ "precedence", Types.BIGINT },
			{ "tries", Types.BIGINT },
			{ "passpuntuation", Types.INTEGER },
			{ "priority", Types.BIGINT },
			{ "moduleId", Types.BIGINT },
			{ "extracontent", Types.VARCHAR },
			{ "feedbackCorrect", Types.VARCHAR },
			{ "feedbackNoCorrect", Types.VARCHAR },
			{ "weightinmodule", Types.BIGINT },
			{ "commentsActivated", Types.BOOLEAN },
			{ "linkedActivityId", Types.BIGINT },
			{ "improve", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_LearningActivity (uuid_ VARCHAR(75) null,actId LONG not null primary key,companyId LONG,userId LONG,groupId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,description STRING null,typeId INTEGER,startdate DATE null,enddate DATE null,precedence LONG,tries LONG,passpuntuation INTEGER,priority LONG,moduleId LONG,extracontent TEXT null,feedbackCorrect VARCHAR(1000) null,feedbackNoCorrect VARCHAR(1000) null,weightinmodule LONG,commentsActivated BOOLEAN,linkedActivityId LONG,improve BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Lms_LearningActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY learningActivity.moduleId ASC, learningActivity.priority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Lms_LearningActivity.moduleId ASC, Lms_LearningActivity.priority ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.LearningActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.LearningActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.LearningActivity"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long MODULEID_COLUMN_BITMASK = 4L;
	public static long PRECEDENCE_COLUMN_BITMASK = 8L;
	public static long PRIORITY_COLUMN_BITMASK = 16L;
	public static long TYPEID_COLUMN_BITMASK = 32L;
	public static long UUID_COLUMN_BITMASK = 64L;
	public static long WEIGHTINMODULE_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LearningActivity toModel(LearningActivitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LearningActivity model = new LearningActivityImpl();

		model.setUuid(soapModel.getUuid());
		model.setActId(soapModel.getActId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setTypeId(soapModel.getTypeId());
		model.setStartdate(soapModel.getStartdate());
		model.setEnddate(soapModel.getEnddate());
		model.setPrecedence(soapModel.getPrecedence());
		model.setTries(soapModel.getTries());
		model.setPasspuntuation(soapModel.getPasspuntuation());
		model.setPriority(soapModel.getPriority());
		model.setModuleId(soapModel.getModuleId());
		model.setExtracontent(soapModel.getExtracontent());
		model.setFeedbackCorrect(soapModel.getFeedbackCorrect());
		model.setFeedbackNoCorrect(soapModel.getFeedbackNoCorrect());
		model.setWeightinmodule(soapModel.getWeightinmodule());
		model.setCommentsActivated(soapModel.getCommentsActivated());
		model.setLinkedActivityId(soapModel.getLinkedActivityId());
		model.setImprove(soapModel.getImprove());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LearningActivity> toModels(
		LearningActivitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LearningActivity> models = new ArrayList<LearningActivity>(soapModels.length);

		for (LearningActivitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.LearningActivity"));

	public LearningActivityModelImpl() {
	}

	public long getPrimaryKey() {
		return _actId;
	}

	public void setPrimaryKey(long primaryKey) {
		setActId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_actId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LearningActivity.class;
	}

	public String getModelClassName() {
		return LearningActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("actId", getActId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("typeId", getTypeId());
		attributes.put("startdate", getStartdate());
		attributes.put("enddate", getEnddate());
		attributes.put("precedence", getPrecedence());
		attributes.put("tries", getTries());
		attributes.put("passpuntuation", getPasspuntuation());
		attributes.put("priority", getPriority());
		attributes.put("moduleId", getModuleId());
		attributes.put("extracontent", getExtracontent());
		attributes.put("feedbackCorrect", getFeedbackCorrect());
		attributes.put("feedbackNoCorrect", getFeedbackNoCorrect());
		attributes.put("weightinmodule", getWeightinmodule());
		attributes.put("commentsActivated", getCommentsActivated());
		attributes.put("linkedActivityId", getLinkedActivityId());
		attributes.put("improve", getImprove());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long actId = (Long)attributes.get("actId");

		if (actId != null) {
			setActId(actId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer typeId = (Integer)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Date startdate = (Date)attributes.get("startdate");

		if (startdate != null) {
			setStartdate(startdate);
		}

		Date enddate = (Date)attributes.get("enddate");

		if (enddate != null) {
			setEnddate(enddate);
		}

		Long precedence = (Long)attributes.get("precedence");

		if (precedence != null) {
			setPrecedence(precedence);
		}

		Long tries = (Long)attributes.get("tries");

		if (tries != null) {
			setTries(tries);
		}

		Integer passpuntuation = (Integer)attributes.get("passpuntuation");

		if (passpuntuation != null) {
			setPasspuntuation(passpuntuation);
		}

		Long priority = (Long)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Long moduleId = (Long)attributes.get("moduleId");

		if (moduleId != null) {
			setModuleId(moduleId);
		}

		String extracontent = (String)attributes.get("extracontent");

		if (extracontent != null) {
			setExtracontent(extracontent);
		}

		String feedbackCorrect = (String)attributes.get("feedbackCorrect");

		if (feedbackCorrect != null) {
			setFeedbackCorrect(feedbackCorrect);
		}

		String feedbackNoCorrect = (String)attributes.get("feedbackNoCorrect");

		if (feedbackNoCorrect != null) {
			setFeedbackNoCorrect(feedbackNoCorrect);
		}

		Long weightinmodule = (Long)attributes.get("weightinmodule");

		if (weightinmodule != null) {
			setWeightinmodule(weightinmodule);
		}

		Boolean commentsActivated = (Boolean)attributes.get("commentsActivated");

		if (commentsActivated != null) {
			setCommentsActivated(commentsActivated);
		}

		Long linkedActivityId = (Long)attributes.get("linkedActivityId");

		if (linkedActivityId != null) {
			setLinkedActivityId(linkedActivityId);
		}

		Boolean improve = (Boolean)attributes.get("improve");

		if (improve != null) {
			setImprove(improve);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getActId() {
		return _actId;
	}

	public void setActId(long actId) {
		_actId = actId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	public void setTitle(String title) {
		_title = title;
	}

	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		Locale[] locales = LanguageUtil.getAvailableLocales();

		for (Locale locale : locales) {
			String title = titleMap.get(locale);

			setTitle(title, locale, defaultLocale);
		}
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	public void setDescription(String description) {
		_description = description;
	}

	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		Locale[] locales = LanguageUtil.getAvailableLocales();

		for (Locale locale : locales) {
			String description = descriptionMap.get(locale);

			setDescription(description, locale, defaultLocale);
		}
	}

	public int getTypeId() {
		return _typeId;
	}

	public void setTypeId(int typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public int getOriginalTypeId() {
		return _originalTypeId;
	}

	public Date getStartdate() {
		return _startdate;
	}

	public void setStartdate(Date startdate) {
		_startdate = startdate;
	}

	public Date getEnddate() {
		return _enddate;
	}

	public void setEnddate(Date enddate) {
		_enddate = enddate;
	}

	public long getPrecedence() {
		return _precedence;
	}

	public void setPrecedence(long precedence) {
		_columnBitmask |= PRECEDENCE_COLUMN_BITMASK;

		if (!_setOriginalPrecedence) {
			_setOriginalPrecedence = true;

			_originalPrecedence = _precedence;
		}

		_precedence = precedence;
	}

	public long getOriginalPrecedence() {
		return _originalPrecedence;
	}

	public long getTries() {
		return _tries;
	}

	public void setTries(long tries) {
		_tries = tries;
	}

	public int getPasspuntuation() {
		return _passpuntuation;
	}

	public void setPasspuntuation(int passpuntuation) {
		_passpuntuation = passpuntuation;
	}

	public long getPriority() {
		return _priority;
	}

	public void setPriority(long priority) {
		_columnBitmask = -1L;

		if (!_setOriginalPriority) {
			_setOriginalPriority = true;

			_originalPriority = _priority;
		}

		_priority = priority;
	}

	public long getOriginalPriority() {
		return _originalPriority;
	}

	public long getModuleId() {
		return _moduleId;
	}

	public void setModuleId(long moduleId) {
		_columnBitmask = -1L;

		if (!_setOriginalModuleId) {
			_setOriginalModuleId = true;

			_originalModuleId = _moduleId;
		}

		_moduleId = moduleId;
	}

	public long getOriginalModuleId() {
		return _originalModuleId;
	}

	public String getExtracontent() {
		if (_extracontent == null) {
			return StringPool.BLANK;
		}
		else {
			return _extracontent;
		}
	}

	public void setExtracontent(String extracontent) {
		_extracontent = extracontent;
	}

	public String getFeedbackCorrect() {
		if (_feedbackCorrect == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbackCorrect;
		}
	}

	public void setFeedbackCorrect(String feedbackCorrect) {
		_feedbackCorrect = feedbackCorrect;
	}

	public String getFeedbackNoCorrect() {
		if (_feedbackNoCorrect == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbackNoCorrect;
		}
	}

	public void setFeedbackNoCorrect(String feedbackNoCorrect) {
		_feedbackNoCorrect = feedbackNoCorrect;
	}

	public long getWeightinmodule() {
		return _weightinmodule;
	}

	public void setWeightinmodule(long weightinmodule) {
		_columnBitmask |= WEIGHTINMODULE_COLUMN_BITMASK;

		if (!_setOriginalWeightinmodule) {
			_setOriginalWeightinmodule = true;

			_originalWeightinmodule = _weightinmodule;
		}

		_weightinmodule = weightinmodule;
	}

	public long getOriginalWeightinmodule() {
		return _originalWeightinmodule;
	}

	public boolean getCommentsActivated() {
		return _commentsActivated;
	}

	public boolean isCommentsActivated() {
		return _commentsActivated;
	}

	public void setCommentsActivated(boolean commentsActivated) {
		_commentsActivated = commentsActivated;
	}

	public long getLinkedActivityId() {
		return _linkedActivityId;
	}

	public void setLinkedActivityId(long linkedActivityId) {
		_linkedActivityId = linkedActivityId;
	}

	public boolean getImprove() {
		return _improve;
	}

	public boolean isImprove() {
		return _improve;
	}

	public void setImprove(boolean improve) {
		_improve = improve;
	}

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved() {
		return isApproved();
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if ((getStatus() == WorkflowConstants.STATUS_DRAFT) ||
				(getStatus() == WorkflowConstants.STATUS_DRAFT_FROM_APPROVED)) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LearningActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		setTitle(getTitle(defaultImportLocale), defaultImportLocale,
			defaultImportLocale);
		setDescription(getDescription(defaultImportLocale),
			defaultImportLocale, defaultImportLocale);
	}

	@Override
	public LearningActivity toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LearningActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LearningActivityImpl learningActivityImpl = new LearningActivityImpl();

		learningActivityImpl.setUuid(getUuid());
		learningActivityImpl.setActId(getActId());
		learningActivityImpl.setCompanyId(getCompanyId());
		learningActivityImpl.setUserId(getUserId());
		learningActivityImpl.setGroupId(getGroupId());
		learningActivityImpl.setUserName(getUserName());
		learningActivityImpl.setCreateDate(getCreateDate());
		learningActivityImpl.setModifiedDate(getModifiedDate());
		learningActivityImpl.setStatus(getStatus());
		learningActivityImpl.setStatusByUserId(getStatusByUserId());
		learningActivityImpl.setStatusByUserName(getStatusByUserName());
		learningActivityImpl.setStatusDate(getStatusDate());
		learningActivityImpl.setTitle(getTitle());
		learningActivityImpl.setDescription(getDescription());
		learningActivityImpl.setTypeId(getTypeId());
		learningActivityImpl.setStartdate(getStartdate());
		learningActivityImpl.setEnddate(getEnddate());
		learningActivityImpl.setPrecedence(getPrecedence());
		learningActivityImpl.setTries(getTries());
		learningActivityImpl.setPasspuntuation(getPasspuntuation());
		learningActivityImpl.setPriority(getPriority());
		learningActivityImpl.setModuleId(getModuleId());
		learningActivityImpl.setExtracontent(getExtracontent());
		learningActivityImpl.setFeedbackCorrect(getFeedbackCorrect());
		learningActivityImpl.setFeedbackNoCorrect(getFeedbackNoCorrect());
		learningActivityImpl.setWeightinmodule(getWeightinmodule());
		learningActivityImpl.setCommentsActivated(getCommentsActivated());
		learningActivityImpl.setLinkedActivityId(getLinkedActivityId());
		learningActivityImpl.setImprove(getImprove());

		learningActivityImpl.resetOriginalValues();

		return learningActivityImpl;
	}

	public int compareTo(LearningActivity learningActivity) {
		int value = 0;

		if (getModuleId() < learningActivity.getModuleId()) {
			value = -1;
		}
		else if (getModuleId() > learningActivity.getModuleId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getPriority() < learningActivity.getPriority()) {
			value = -1;
		}
		else if (getPriority() > learningActivity.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LearningActivity learningActivity = null;

		try {
			learningActivity = (LearningActivity)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = learningActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LearningActivityModelImpl learningActivityModelImpl = this;

		learningActivityModelImpl._originalUuid = learningActivityModelImpl._uuid;

		learningActivityModelImpl._originalCompanyId = learningActivityModelImpl._companyId;

		learningActivityModelImpl._setOriginalCompanyId = false;

		learningActivityModelImpl._originalGroupId = learningActivityModelImpl._groupId;

		learningActivityModelImpl._setOriginalGroupId = false;

		learningActivityModelImpl._originalTypeId = learningActivityModelImpl._typeId;

		learningActivityModelImpl._setOriginalTypeId = false;

		learningActivityModelImpl._originalPrecedence = learningActivityModelImpl._precedence;

		learningActivityModelImpl._setOriginalPrecedence = false;

		learningActivityModelImpl._originalPriority = learningActivityModelImpl._priority;

		learningActivityModelImpl._setOriginalPriority = false;

		learningActivityModelImpl._originalModuleId = learningActivityModelImpl._moduleId;

		learningActivityModelImpl._setOriginalModuleId = false;

		learningActivityModelImpl._originalWeightinmodule = learningActivityModelImpl._weightinmodule;

		learningActivityModelImpl._setOriginalWeightinmodule = false;

		learningActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearningActivity> toCacheModel() {
		LearningActivityCacheModel learningActivityCacheModel = new LearningActivityCacheModel();

		learningActivityCacheModel.uuid = getUuid();

		String uuid = learningActivityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			learningActivityCacheModel.uuid = null;
		}

		learningActivityCacheModel.actId = getActId();

		learningActivityCacheModel.companyId = getCompanyId();

		learningActivityCacheModel.userId = getUserId();

		learningActivityCacheModel.groupId = getGroupId();

		learningActivityCacheModel.userName = getUserName();

		String userName = learningActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			learningActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			learningActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			learningActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			learningActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			learningActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.status = getStatus();

		learningActivityCacheModel.statusByUserId = getStatusByUserId();

		learningActivityCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = learningActivityCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			learningActivityCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			learningActivityCacheModel.statusDate = statusDate.getTime();
		}
		else {
			learningActivityCacheModel.statusDate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.title = getTitle();

		String title = learningActivityCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			learningActivityCacheModel.title = null;
		}

		learningActivityCacheModel.description = getDescription();

		String description = learningActivityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			learningActivityCacheModel.description = null;
		}

		learningActivityCacheModel.typeId = getTypeId();

		Date startdate = getStartdate();

		if (startdate != null) {
			learningActivityCacheModel.startdate = startdate.getTime();
		}
		else {
			learningActivityCacheModel.startdate = Long.MIN_VALUE;
		}

		Date enddate = getEnddate();

		if (enddate != null) {
			learningActivityCacheModel.enddate = enddate.getTime();
		}
		else {
			learningActivityCacheModel.enddate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.precedence = getPrecedence();

		learningActivityCacheModel.tries = getTries();

		learningActivityCacheModel.passpuntuation = getPasspuntuation();

		learningActivityCacheModel.priority = getPriority();

		learningActivityCacheModel.moduleId = getModuleId();

		learningActivityCacheModel.extracontent = getExtracontent();

		String extracontent = learningActivityCacheModel.extracontent;

		if ((extracontent != null) && (extracontent.length() == 0)) {
			learningActivityCacheModel.extracontent = null;
		}

		learningActivityCacheModel.feedbackCorrect = getFeedbackCorrect();

		String feedbackCorrect = learningActivityCacheModel.feedbackCorrect;

		if ((feedbackCorrect != null) && (feedbackCorrect.length() == 0)) {
			learningActivityCacheModel.feedbackCorrect = null;
		}

		learningActivityCacheModel.feedbackNoCorrect = getFeedbackNoCorrect();

		String feedbackNoCorrect = learningActivityCacheModel.feedbackNoCorrect;

		if ((feedbackNoCorrect != null) && (feedbackNoCorrect.length() == 0)) {
			learningActivityCacheModel.feedbackNoCorrect = null;
		}

		learningActivityCacheModel.weightinmodule = getWeightinmodule();

		learningActivityCacheModel.commentsActivated = getCommentsActivated();

		learningActivityCacheModel.linkedActivityId = getLinkedActivityId();

		learningActivityCacheModel.improve = getImprove();

		return learningActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(59);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", startdate=");
		sb.append(getStartdate());
		sb.append(", enddate=");
		sb.append(getEnddate());
		sb.append(", precedence=");
		sb.append(getPrecedence());
		sb.append(", tries=");
		sb.append(getTries());
		sb.append(", passpuntuation=");
		sb.append(getPasspuntuation());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", moduleId=");
		sb.append(getModuleId());
		sb.append(", extracontent=");
		sb.append(getExtracontent());
		sb.append(", feedbackCorrect=");
		sb.append(getFeedbackCorrect());
		sb.append(", feedbackNoCorrect=");
		sb.append(getFeedbackNoCorrect());
		sb.append(", weightinmodule=");
		sb.append(getWeightinmodule());
		sb.append(", commentsActivated=");
		sb.append(getCommentsActivated());
		sb.append(", linkedActivityId=");
		sb.append(getLinkedActivityId());
		sb.append(", improve=");
		sb.append(getImprove());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(91);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.LearningActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startdate</column-name><column-value><![CDATA[");
		sb.append(getStartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enddate</column-name><column-value><![CDATA[");
		sb.append(getEnddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>precedence</column-name><column-value><![CDATA[");
		sb.append(getPrecedence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tries</column-name><column-value><![CDATA[");
		sb.append(getTries());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passpuntuation</column-name><column-value><![CDATA[");
		sb.append(getPasspuntuation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleId</column-name><column-value><![CDATA[");
		sb.append(getModuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extracontent</column-name><column-value><![CDATA[");
		sb.append(getExtracontent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackCorrect</column-name><column-value><![CDATA[");
		sb.append(getFeedbackCorrect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackNoCorrect</column-name><column-value><![CDATA[");
		sb.append(getFeedbackNoCorrect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weightinmodule</column-name><column-value><![CDATA[");
		sb.append(getWeightinmodule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsActivated</column-name><column-value><![CDATA[");
		sb.append(getCommentsActivated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkedActivityId</column-name><column-value><![CDATA[");
		sb.append(getLinkedActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>improve</column-name><column-value><![CDATA[");
		sb.append(getImprove());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LearningActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LearningActivity.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _actId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private int _typeId;
	private int _originalTypeId;
	private boolean _setOriginalTypeId;
	private Date _startdate;
	private Date _enddate;
	private long _precedence;
	private long _originalPrecedence;
	private boolean _setOriginalPrecedence;
	private long _tries;
	private int _passpuntuation;
	private long _priority;
	private long _originalPriority;
	private boolean _setOriginalPriority;
	private long _moduleId;
	private long _originalModuleId;
	private boolean _setOriginalModuleId;
	private String _extracontent;
	private String _feedbackCorrect;
	private String _feedbackNoCorrect;
	private long _weightinmodule;
	private long _originalWeightinmodule;
	private boolean _setOriginalWeightinmodule;
	private boolean _commentsActivated;
	private long _linkedActivityId;
	private boolean _improve;
	private long _columnBitmask;
	private LearningActivity _escapedModelProxy;
}