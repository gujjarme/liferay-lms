/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.AuditEntry;
import com.liferay.lms.model.AuditEntryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AuditEntry service. Represents a row in the &quot;Lms_AuditEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.AuditEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditEntryImpl}.
 * </p>
 *
 * @author TLS
 * @see AuditEntryImpl
 * @see com.liferay.lms.model.AuditEntry
 * @see com.liferay.lms.model.AuditEntryModel
 * @generated
 */
public class AuditEntryModelImpl extends BaseModelImpl<AuditEntry>
	implements AuditEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a audit entry model instance should use the {@link com.liferay.lms.model.AuditEntry} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_AuditEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "auditId", Types.BIGINT },
			{ "auditDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "classname", Types.VARCHAR },
			{ "action", Types.VARCHAR },
			{ "extradata", Types.VARCHAR },
			{ "classPK", Types.BIGINT },
			{ "associationClassPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_AuditEntry (auditId LONG not null primary key,auditDate DATE null,companyId LONG,groupId LONG,userId LONG,classname VARCHAR(75) null,action VARCHAR(75) null,extradata TEXT null,classPK LONG,associationClassPK LONG)";
	public static final String TABLE_SQL_DROP = "drop table Lms_AuditEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY auditEntry.auditDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Lms_AuditEntry.auditDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.AuditEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.AuditEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.AuditEntry"),
			true);
	public static long CLASSPK_COLUMN_BITMASK = 1L;
	public static long CLASSNAME_COLUMN_BITMASK = 2L;
	public static long COMPANYID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long USERID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.AuditEntry"));

	public AuditEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _auditId;
	}

	public void setPrimaryKey(long primaryKey) {
		setAuditId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_auditId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AuditEntry.class;
	}

	public String getModelClassName() {
		return AuditEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("auditId", getAuditId());
		attributes.put("auditDate", getAuditDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("classname", getClassname());
		attributes.put("action", getAction());
		attributes.put("extradata", getExtradata());
		attributes.put("classPK", getClassPK());
		attributes.put("associationClassPK", getAssociationClassPK());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long auditId = (Long)attributes.get("auditId");

		if (auditId != null) {
			setAuditId(auditId);
		}

		Date auditDate = (Date)attributes.get("auditDate");

		if (auditDate != null) {
			setAuditDate(auditDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String classname = (String)attributes.get("classname");

		if (classname != null) {
			setClassname(classname);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		String extradata = (String)attributes.get("extradata");

		if (extradata != null) {
			setExtradata(extradata);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Long associationClassPK = (Long)attributes.get("associationClassPK");

		if (associationClassPK != null) {
			setAssociationClassPK(associationClassPK);
		}
	}

	public long getAuditId() {
		return _auditId;
	}

	public void setAuditId(long auditId) {
		_auditId = auditId;
	}

	public Date getAuditDate() {
		return _auditDate;
	}

	public void setAuditDate(Date auditDate) {
		_columnBitmask = -1L;

		_auditDate = auditDate;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getClassname() {
		if (_classname == null) {
			return StringPool.BLANK;
		}
		else {
			return _classname;
		}
	}

	public void setClassname(String classname) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassname == null) {
			_originalClassname = _classname;
		}

		_classname = classname;
	}

	public String getOriginalClassname() {
		return GetterUtil.getString(_originalClassname);
	}

	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	public void setAction(String action) {
		_action = action;
	}

	public String getExtradata() {
		if (_extradata == null) {
			return StringPool.BLANK;
		}
		else {
			return _extradata;
		}
	}

	public void setExtradata(String extradata) {
		_extradata = extradata;
	}

	public long getClassPK() {
		return _classPK;
	}

	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	public long getAssociationClassPK() {
		return _associationClassPK;
	}

	public void setAssociationClassPK(long associationClassPK) {
		_associationClassPK = associationClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AuditEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AuditEntry toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AuditEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AuditEntryImpl auditEntryImpl = new AuditEntryImpl();

		auditEntryImpl.setAuditId(getAuditId());
		auditEntryImpl.setAuditDate(getAuditDate());
		auditEntryImpl.setCompanyId(getCompanyId());
		auditEntryImpl.setGroupId(getGroupId());
		auditEntryImpl.setUserId(getUserId());
		auditEntryImpl.setClassname(getClassname());
		auditEntryImpl.setAction(getAction());
		auditEntryImpl.setExtradata(getExtradata());
		auditEntryImpl.setClassPK(getClassPK());
		auditEntryImpl.setAssociationClassPK(getAssociationClassPK());

		auditEntryImpl.resetOriginalValues();

		return auditEntryImpl;
	}

	public int compareTo(AuditEntry auditEntry) {
		int value = 0;

		value = DateUtil.compareTo(getAuditDate(), auditEntry.getAuditDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AuditEntry auditEntry = null;

		try {
			auditEntry = (AuditEntry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = auditEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AuditEntryModelImpl auditEntryModelImpl = this;

		auditEntryModelImpl._originalCompanyId = auditEntryModelImpl._companyId;

		auditEntryModelImpl._setOriginalCompanyId = false;

		auditEntryModelImpl._originalGroupId = auditEntryModelImpl._groupId;

		auditEntryModelImpl._setOriginalGroupId = false;

		auditEntryModelImpl._originalUserId = auditEntryModelImpl._userId;

		auditEntryModelImpl._setOriginalUserId = false;

		auditEntryModelImpl._originalClassname = auditEntryModelImpl._classname;

		auditEntryModelImpl._originalClassPK = auditEntryModelImpl._classPK;

		auditEntryModelImpl._setOriginalClassPK = false;

		auditEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AuditEntry> toCacheModel() {
		AuditEntryCacheModel auditEntryCacheModel = new AuditEntryCacheModel();

		auditEntryCacheModel.auditId = getAuditId();

		Date auditDate = getAuditDate();

		if (auditDate != null) {
			auditEntryCacheModel.auditDate = auditDate.getTime();
		}
		else {
			auditEntryCacheModel.auditDate = Long.MIN_VALUE;
		}

		auditEntryCacheModel.companyId = getCompanyId();

		auditEntryCacheModel.groupId = getGroupId();

		auditEntryCacheModel.userId = getUserId();

		auditEntryCacheModel.classname = getClassname();

		String classname = auditEntryCacheModel.classname;

		if ((classname != null) && (classname.length() == 0)) {
			auditEntryCacheModel.classname = null;
		}

		auditEntryCacheModel.action = getAction();

		String action = auditEntryCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			auditEntryCacheModel.action = null;
		}

		auditEntryCacheModel.extradata = getExtradata();

		String extradata = auditEntryCacheModel.extradata;

		if ((extradata != null) && (extradata.length() == 0)) {
			auditEntryCacheModel.extradata = null;
		}

		auditEntryCacheModel.classPK = getClassPK();

		auditEntryCacheModel.associationClassPK = getAssociationClassPK();

		return auditEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{auditId=");
		sb.append(getAuditId());
		sb.append(", auditDate=");
		sb.append(getAuditDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", classname=");
		sb.append(getClassname());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", extradata=");
		sb.append(getExtradata());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", associationClassPK=");
		sb.append(getAssociationClassPK());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.AuditEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>auditId</column-name><column-value><![CDATA[");
		sb.append(getAuditId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditDate</column-name><column-value><![CDATA[");
		sb.append(getAuditDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classname</column-name><column-value><![CDATA[");
		sb.append(getClassname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extradata</column-name><column-value><![CDATA[");
		sb.append(getExtradata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associationClassPK</column-name><column-value><![CDATA[");
		sb.append(getAssociationClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AuditEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AuditEntry.class
		};
	private long _auditId;
	private Date _auditDate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _classname;
	private String _originalClassname;
	private String _action;
	private String _extradata;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _associationClassPK;
	private long _columnBitmask;
	private AuditEntry _escapedModelProxy;
}