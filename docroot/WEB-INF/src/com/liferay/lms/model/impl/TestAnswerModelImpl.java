/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.TestAnswer;
import com.liferay.lms.model.TestAnswerModel;
import com.liferay.lms.model.TestAnswerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TestAnswer service. Represents a row in the &quot;Lms_TestAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.TestAnswerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestAnswerImpl}.
 * </p>
 *
 * @author TLS
 * @see TestAnswerImpl
 * @see com.liferay.lms.model.TestAnswer
 * @see com.liferay.lms.model.TestAnswerModel
 * @generated
 */
public class TestAnswerModelImpl extends BaseModelImpl<TestAnswer>
	implements TestAnswerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test answer model instance should use the {@link com.liferay.lms.model.TestAnswer} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_TestAnswer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "answerId", Types.BIGINT },
			{ "questionId", Types.BIGINT },
			{ "actId", Types.BIGINT },
			{ "precedence", Types.BIGINT },
			{ "answer", Types.VARCHAR },
			{ "isCorrect", Types.BOOLEAN },
			{ "feedbackCorrect", Types.VARCHAR },
			{ "feedbacknocorrect", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_TestAnswer (uuid_ VARCHAR(75) null,answerId LONG not null primary key,questionId LONG,actId LONG,precedence LONG,answer TEXT null,isCorrect BOOLEAN,feedbackCorrect VARCHAR(1000) null,feedbacknocorrect VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table Lms_TestAnswer";
	public static final String ORDER_BY_JPQL = " ORDER BY testAnswer.answerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Lms_TestAnswer.answerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.TestAnswer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.TestAnswer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.TestAnswer"),
			true);
	public static long ACTID_COLUMN_BITMASK = 1L;
	public static long QUESTIONID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TestAnswer toModel(TestAnswerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TestAnswer model = new TestAnswerImpl();

		model.setUuid(soapModel.getUuid());
		model.setAnswerId(soapModel.getAnswerId());
		model.setQuestionId(soapModel.getQuestionId());
		model.setActId(soapModel.getActId());
		model.setPrecedence(soapModel.getPrecedence());
		model.setAnswer(soapModel.getAnswer());
		model.setIsCorrect(soapModel.getIsCorrect());
		model.setFeedbackCorrect(soapModel.getFeedbackCorrect());
		model.setFeedbacknocorrect(soapModel.getFeedbacknocorrect());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TestAnswer> toModels(TestAnswerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TestAnswer> models = new ArrayList<TestAnswer>(soapModels.length);

		for (TestAnswerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.TestAnswer"));

	public TestAnswerModelImpl() {
	}

	public long getPrimaryKey() {
		return _answerId;
	}

	public void setPrimaryKey(long primaryKey) {
		setAnswerId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_answerId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TestAnswer.class;
	}

	public String getModelClassName() {
		return TestAnswer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("answerId", getAnswerId());
		attributes.put("questionId", getQuestionId());
		attributes.put("actId", getActId());
		attributes.put("precedence", getPrecedence());
		attributes.put("answer", getAnswer());
		attributes.put("isCorrect", getIsCorrect());
		attributes.put("feedbackCorrect", getFeedbackCorrect());
		attributes.put("feedbacknocorrect", getFeedbacknocorrect());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long answerId = (Long)attributes.get("answerId");

		if (answerId != null) {
			setAnswerId(answerId);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Long actId = (Long)attributes.get("actId");

		if (actId != null) {
			setActId(actId);
		}

		Long precedence = (Long)attributes.get("precedence");

		if (precedence != null) {
			setPrecedence(precedence);
		}

		String answer = (String)attributes.get("answer");

		if (answer != null) {
			setAnswer(answer);
		}

		Boolean isCorrect = (Boolean)attributes.get("isCorrect");

		if (isCorrect != null) {
			setIsCorrect(isCorrect);
		}

		String feedbackCorrect = (String)attributes.get("feedbackCorrect");

		if (feedbackCorrect != null) {
			setFeedbackCorrect(feedbackCorrect);
		}

		String feedbacknocorrect = (String)attributes.get("feedbacknocorrect");

		if (feedbacknocorrect != null) {
			setFeedbacknocorrect(feedbacknocorrect);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getAnswerId() {
		return _answerId;
	}

	public void setAnswerId(long answerId) {
		_columnBitmask = -1L;

		_answerId = answerId;
	}

	public long getQuestionId() {
		return _questionId;
	}

	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	public long getActId() {
		return _actId;
	}

	public void setActId(long actId) {
		_columnBitmask |= ACTID_COLUMN_BITMASK;

		if (!_setOriginalActId) {
			_setOriginalActId = true;

			_originalActId = _actId;
		}

		_actId = actId;
	}

	public long getOriginalActId() {
		return _originalActId;
	}

	public long getPrecedence() {
		return _precedence;
	}

	public void setPrecedence(long precedence) {
		_precedence = precedence;
	}

	public String getAnswer() {
		if (_answer == null) {
			return StringPool.BLANK;
		}
		else {
			return _answer;
		}
	}

	public void setAnswer(String answer) {
		_answer = answer;
	}

	public boolean getIsCorrect() {
		return _isCorrect;
	}

	public boolean isIsCorrect() {
		return _isCorrect;
	}

	public void setIsCorrect(boolean isCorrect) {
		_isCorrect = isCorrect;
	}

	public String getFeedbackCorrect() {
		if (_feedbackCorrect == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbackCorrect;
		}
	}

	public void setFeedbackCorrect(String feedbackCorrect) {
		_feedbackCorrect = feedbackCorrect;
	}

	public String getFeedbacknocorrect() {
		if (_feedbacknocorrect == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbacknocorrect;
		}
	}

	public void setFeedbacknocorrect(String feedbacknocorrect) {
		_feedbacknocorrect = feedbacknocorrect;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TestAnswer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestAnswer toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TestAnswer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TestAnswerImpl testAnswerImpl = new TestAnswerImpl();

		testAnswerImpl.setUuid(getUuid());
		testAnswerImpl.setAnswerId(getAnswerId());
		testAnswerImpl.setQuestionId(getQuestionId());
		testAnswerImpl.setActId(getActId());
		testAnswerImpl.setPrecedence(getPrecedence());
		testAnswerImpl.setAnswer(getAnswer());
		testAnswerImpl.setIsCorrect(getIsCorrect());
		testAnswerImpl.setFeedbackCorrect(getFeedbackCorrect());
		testAnswerImpl.setFeedbacknocorrect(getFeedbacknocorrect());

		testAnswerImpl.resetOriginalValues();

		return testAnswerImpl;
	}

	public int compareTo(TestAnswer testAnswer) {
		int value = 0;

		if (getAnswerId() < testAnswer.getAnswerId()) {
			value = -1;
		}
		else if (getAnswerId() > testAnswer.getAnswerId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TestAnswer testAnswer = null;

		try {
			testAnswer = (TestAnswer)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = testAnswer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TestAnswerModelImpl testAnswerModelImpl = this;

		testAnswerModelImpl._originalUuid = testAnswerModelImpl._uuid;

		testAnswerModelImpl._originalQuestionId = testAnswerModelImpl._questionId;

		testAnswerModelImpl._setOriginalQuestionId = false;

		testAnswerModelImpl._originalActId = testAnswerModelImpl._actId;

		testAnswerModelImpl._setOriginalActId = false;

		testAnswerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TestAnswer> toCacheModel() {
		TestAnswerCacheModel testAnswerCacheModel = new TestAnswerCacheModel();

		testAnswerCacheModel.uuid = getUuid();

		String uuid = testAnswerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			testAnswerCacheModel.uuid = null;
		}

		testAnswerCacheModel.answerId = getAnswerId();

		testAnswerCacheModel.questionId = getQuestionId();

		testAnswerCacheModel.actId = getActId();

		testAnswerCacheModel.precedence = getPrecedence();

		testAnswerCacheModel.answer = getAnswer();

		String answer = testAnswerCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			testAnswerCacheModel.answer = null;
		}

		testAnswerCacheModel.isCorrect = getIsCorrect();

		testAnswerCacheModel.feedbackCorrect = getFeedbackCorrect();

		String feedbackCorrect = testAnswerCacheModel.feedbackCorrect;

		if ((feedbackCorrect != null) && (feedbackCorrect.length() == 0)) {
			testAnswerCacheModel.feedbackCorrect = null;
		}

		testAnswerCacheModel.feedbacknocorrect = getFeedbacknocorrect();

		String feedbacknocorrect = testAnswerCacheModel.feedbacknocorrect;

		if ((feedbacknocorrect != null) && (feedbacknocorrect.length() == 0)) {
			testAnswerCacheModel.feedbacknocorrect = null;
		}

		return testAnswerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", answerId=");
		sb.append(getAnswerId());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", precedence=");
		sb.append(getPrecedence());
		sb.append(", answer=");
		sb.append(getAnswer());
		sb.append(", isCorrect=");
		sb.append(getIsCorrect());
		sb.append(", feedbackCorrect=");
		sb.append(getFeedbackCorrect());
		sb.append(", feedbacknocorrect=");
		sb.append(getFeedbacknocorrect());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.TestAnswer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerId</column-name><column-value><![CDATA[");
		sb.append(getAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>precedence</column-name><column-value><![CDATA[");
		sb.append(getPrecedence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answer</column-name><column-value><![CDATA[");
		sb.append(getAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCorrect</column-name><column-value><![CDATA[");
		sb.append(getIsCorrect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackCorrect</column-name><column-value><![CDATA[");
		sb.append(getFeedbackCorrect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbacknocorrect</column-name><column-value><![CDATA[");
		sb.append(getFeedbacknocorrect());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TestAnswer.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TestAnswer.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _answerId;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private long _actId;
	private long _originalActId;
	private boolean _setOriginalActId;
	private long _precedence;
	private String _answer;
	private boolean _isCorrect;
	private String _feedbackCorrect;
	private String _feedbacknocorrect;
	private long _columnBitmask;
	private TestAnswer _escapedModelProxy;
}