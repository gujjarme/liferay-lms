/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.CourseCompetence;
import com.liferay.lms.model.CourseCompetenceModel;
import com.liferay.lms.model.CourseCompetenceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CourseCompetence service. Represents a row in the &quot;Lms_CourseCompetence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.CourseCompetenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseCompetenceImpl}.
 * </p>
 *
 * @author TLS
 * @see CourseCompetenceImpl
 * @see com.liferay.lms.model.CourseCompetence
 * @see com.liferay.lms.model.CourseCompetenceModel
 * @generated
 */
public class CourseCompetenceModelImpl extends BaseModelImpl<CourseCompetence>
	implements CourseCompetenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course competence model instance should use the {@link com.liferay.lms.model.CourseCompetence} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_CourseCompetence";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "CourcompetenceId", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "competenceId", Types.BIGINT },
			{ "condition_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_CourseCompetence (uuid_ VARCHAR(75) null,CourcompetenceId LONG not null primary key,courseId LONG,competenceId LONG,condition_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Lms_CourseCompetence";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.CourseCompetence"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.CourseCompetence"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.CourseCompetence"),
			true);
	public static long COMPETENCEID_COLUMN_BITMASK = 1L;
	public static long CONDITION_COLUMN_BITMASK = 2L;
	public static long COURSEID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CourseCompetence toModel(CourseCompetenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CourseCompetence model = new CourseCompetenceImpl();

		model.setUuid(soapModel.getUuid());
		model.setCourcompetenceId(soapModel.getCourcompetenceId());
		model.setCourseId(soapModel.getCourseId());
		model.setCompetenceId(soapModel.getCompetenceId());
		model.setCondition(soapModel.getCondition());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CourseCompetence> toModels(
		CourseCompetenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CourseCompetence> models = new ArrayList<CourseCompetence>(soapModels.length);

		for (CourseCompetenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.CourseCompetence"));

	public CourseCompetenceModelImpl() {
	}

	public long getPrimaryKey() {
		return _CourcompetenceId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCourcompetenceId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_CourcompetenceId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CourseCompetence.class;
	}

	public String getModelClassName() {
		return CourseCompetence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("CourcompetenceId", getCourcompetenceId());
		attributes.put("courseId", getCourseId());
		attributes.put("competenceId", getCompetenceId());
		attributes.put("condition", getCondition());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long CourcompetenceId = (Long)attributes.get("CourcompetenceId");

		if (CourcompetenceId != null) {
			setCourcompetenceId(CourcompetenceId);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long competenceId = (Long)attributes.get("competenceId");

		if (competenceId != null) {
			setCompetenceId(competenceId);
		}

		Boolean condition = (Boolean)attributes.get("condition");

		if (condition != null) {
			setCondition(condition);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getCourcompetenceId() {
		return _CourcompetenceId;
	}

	public void setCourcompetenceId(long CourcompetenceId) {
		_CourcompetenceId = CourcompetenceId;
	}

	public long getCourseId() {
		return _courseId;
	}

	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	public long getCompetenceId() {
		return _competenceId;
	}

	public void setCompetenceId(long competenceId) {
		_columnBitmask |= COMPETENCEID_COLUMN_BITMASK;

		if (!_setOriginalCompetenceId) {
			_setOriginalCompetenceId = true;

			_originalCompetenceId = _competenceId;
		}

		_competenceId = competenceId;
	}

	public long getOriginalCompetenceId() {
		return _originalCompetenceId;
	}

	public boolean getCondition() {
		return _condition;
	}

	public boolean isCondition() {
		return _condition;
	}

	public void setCondition(boolean condition) {
		_columnBitmask |= CONDITION_COLUMN_BITMASK;

		if (!_setOriginalCondition) {
			_setOriginalCondition = true;

			_originalCondition = _condition;
		}

		_condition = condition;
	}

	public boolean getOriginalCondition() {
		return _originalCondition;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CourseCompetence.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CourseCompetence toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CourseCompetence)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CourseCompetenceImpl courseCompetenceImpl = new CourseCompetenceImpl();

		courseCompetenceImpl.setUuid(getUuid());
		courseCompetenceImpl.setCourcompetenceId(getCourcompetenceId());
		courseCompetenceImpl.setCourseId(getCourseId());
		courseCompetenceImpl.setCompetenceId(getCompetenceId());
		courseCompetenceImpl.setCondition(getCondition());

		courseCompetenceImpl.resetOriginalValues();

		return courseCompetenceImpl;
	}

	public int compareTo(CourseCompetence courseCompetence) {
		long primaryKey = courseCompetence.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CourseCompetence courseCompetence = null;

		try {
			courseCompetence = (CourseCompetence)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = courseCompetence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseCompetenceModelImpl courseCompetenceModelImpl = this;

		courseCompetenceModelImpl._originalUuid = courseCompetenceModelImpl._uuid;

		courseCompetenceModelImpl._originalCourseId = courseCompetenceModelImpl._courseId;

		courseCompetenceModelImpl._setOriginalCourseId = false;

		courseCompetenceModelImpl._originalCompetenceId = courseCompetenceModelImpl._competenceId;

		courseCompetenceModelImpl._setOriginalCompetenceId = false;

		courseCompetenceModelImpl._originalCondition = courseCompetenceModelImpl._condition;

		courseCompetenceModelImpl._setOriginalCondition = false;

		courseCompetenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseCompetence> toCacheModel() {
		CourseCompetenceCacheModel courseCompetenceCacheModel = new CourseCompetenceCacheModel();

		courseCompetenceCacheModel.uuid = getUuid();

		String uuid = courseCompetenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			courseCompetenceCacheModel.uuid = null;
		}

		courseCompetenceCacheModel.CourcompetenceId = getCourcompetenceId();

		courseCompetenceCacheModel.courseId = getCourseId();

		courseCompetenceCacheModel.competenceId = getCompetenceId();

		courseCompetenceCacheModel.condition = getCondition();

		return courseCompetenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", CourcompetenceId=");
		sb.append(getCourcompetenceId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", competenceId=");
		sb.append(getCompetenceId());
		sb.append(", condition=");
		sb.append(getCondition());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.CourseCompetence");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CourcompetenceId</column-name><column-value><![CDATA[");
		sb.append(getCourcompetenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>competenceId</column-name><column-value><![CDATA[");
		sb.append(getCompetenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>condition</column-name><column-value><![CDATA[");
		sb.append(getCondition());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CourseCompetence.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CourseCompetence.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _CourcompetenceId;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _competenceId;
	private long _originalCompetenceId;
	private boolean _setOriginalCompetenceId;
	private boolean _condition;
	private boolean _originalCondition;
	private boolean _setOriginalCondition;
	private long _columnBitmask;
	private CourseCompetence _escapedModelProxy;
}