/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.CourseTypeRelation;
import com.liferay.lms.model.CourseTypeRelationModel;
import com.liferay.lms.model.CourseTypeRelationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CourseTypeRelation service. Represents a row in the &quot;Lms_CourseTypeRelation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.CourseTypeRelationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseTypeRelationImpl}.
 * </p>
 *
 * @author TLS
 * @see CourseTypeRelationImpl
 * @see com.liferay.lms.model.CourseTypeRelation
 * @see com.liferay.lms.model.CourseTypeRelationModel
 * @generated
 */
public class CourseTypeRelationModelImpl extends BaseModelImpl<CourseTypeRelation>
	implements CourseTypeRelationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course type relation model instance should use the {@link com.liferay.lms.model.CourseTypeRelation} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_CourseTypeRelation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "courseTypeRelationId", Types.BIGINT },
			{ "courseTypeId", Types.BIGINT },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_CourseTypeRelation (courseTypeRelationId LONG not null primary key,courseTypeId LONG,classNameId LONG,classPK LONG)";
	public static final String TABLE_SQL_DROP = "drop table Lms_CourseTypeRelation";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.CourseTypeRelation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.CourseTypeRelation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.CourseTypeRelation"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long COURSETYPEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CourseTypeRelation toModel(CourseTypeRelationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CourseTypeRelation model = new CourseTypeRelationImpl();

		model.setCourseTypeRelationId(soapModel.getCourseTypeRelationId());
		model.setCourseTypeId(soapModel.getCourseTypeId());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CourseTypeRelation> toModels(
		CourseTypeRelationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CourseTypeRelation> models = new ArrayList<CourseTypeRelation>(soapModels.length);

		for (CourseTypeRelationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.CourseTypeRelation"));

	public CourseTypeRelationModelImpl() {
	}

	public long getPrimaryKey() {
		return _courseTypeRelationId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCourseTypeRelationId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_courseTypeRelationId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CourseTypeRelation.class;
	}

	public String getModelClassName() {
		return CourseTypeRelation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("courseTypeRelationId", getCourseTypeRelationId());
		attributes.put("courseTypeId", getCourseTypeId());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long courseTypeRelationId = (Long)attributes.get("courseTypeRelationId");

		if (courseTypeRelationId != null) {
			setCourseTypeRelationId(courseTypeRelationId);
		}

		Long courseTypeId = (Long)attributes.get("courseTypeId");

		if (courseTypeId != null) {
			setCourseTypeId(courseTypeId);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}
	}

	public long getCourseTypeRelationId() {
		return _courseTypeRelationId;
	}

	public void setCourseTypeRelationId(long courseTypeRelationId) {
		_courseTypeRelationId = courseTypeRelationId;
	}

	public long getCourseTypeId() {
		return _courseTypeId;
	}

	public void setCourseTypeId(long courseTypeId) {
		_columnBitmask |= COURSETYPEID_COLUMN_BITMASK;

		if (!_setOriginalCourseTypeId) {
			_setOriginalCourseTypeId = true;

			_originalCourseTypeId = _courseTypeId;
		}

		_courseTypeId = courseTypeId;
	}

	public long getOriginalCourseTypeId() {
		return _originalCourseTypeId;
	}

	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	public long getClassNameId() {
		return _classNameId;
	}

	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	public long getClassPK() {
		return _classPK;
	}

	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CourseTypeRelation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CourseTypeRelation toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CourseTypeRelation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CourseTypeRelationImpl courseTypeRelationImpl = new CourseTypeRelationImpl();

		courseTypeRelationImpl.setCourseTypeRelationId(getCourseTypeRelationId());
		courseTypeRelationImpl.setCourseTypeId(getCourseTypeId());
		courseTypeRelationImpl.setClassNameId(getClassNameId());
		courseTypeRelationImpl.setClassPK(getClassPK());

		courseTypeRelationImpl.resetOriginalValues();

		return courseTypeRelationImpl;
	}

	public int compareTo(CourseTypeRelation courseTypeRelation) {
		long primaryKey = courseTypeRelation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CourseTypeRelation courseTypeRelation = null;

		try {
			courseTypeRelation = (CourseTypeRelation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = courseTypeRelation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseTypeRelationModelImpl courseTypeRelationModelImpl = this;

		courseTypeRelationModelImpl._originalCourseTypeId = courseTypeRelationModelImpl._courseTypeId;

		courseTypeRelationModelImpl._setOriginalCourseTypeId = false;

		courseTypeRelationModelImpl._originalClassNameId = courseTypeRelationModelImpl._classNameId;

		courseTypeRelationModelImpl._setOriginalClassNameId = false;

		courseTypeRelationModelImpl._originalClassPK = courseTypeRelationModelImpl._classPK;

		courseTypeRelationModelImpl._setOriginalClassPK = false;

		courseTypeRelationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseTypeRelation> toCacheModel() {
		CourseTypeRelationCacheModel courseTypeRelationCacheModel = new CourseTypeRelationCacheModel();

		courseTypeRelationCacheModel.courseTypeRelationId = getCourseTypeRelationId();

		courseTypeRelationCacheModel.courseTypeId = getCourseTypeId();

		courseTypeRelationCacheModel.classNameId = getClassNameId();

		courseTypeRelationCacheModel.classPK = getClassPK();

		return courseTypeRelationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{courseTypeRelationId=");
		sb.append(getCourseTypeRelationId());
		sb.append(", courseTypeId=");
		sb.append(getCourseTypeId());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.CourseTypeRelation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>courseTypeRelationId</column-name><column-value><![CDATA[");
		sb.append(getCourseTypeRelationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseTypeId</column-name><column-value><![CDATA[");
		sb.append(getCourseTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CourseTypeRelation.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CourseTypeRelation.class
		};
	private long _courseTypeRelationId;
	private long _courseTypeId;
	private long _originalCourseTypeId;
	private boolean _setOriginalCourseTypeId;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _columnBitmask;
	private CourseTypeRelation _escapedModelProxy;
}